根目录架构
    bin         保存系统普通外部命令源文件(可执行文件)   *
    sbin        保存系统管理命令对应的可执行文件         *
    usr         保存用户安装软件的相关目录               *
    lib         保存跨平台系统库文件目录(*.so/*.a)       *
    lib64       保存64位平台库文件目录                   *

    etc         保存操作系统配置文件的目录               *
    boot        保存操作系统启动相关文件的目录           *
    vmlinuz     软链接到内核文件
    initrd.img  软链接到临时文件系统文件

    dev         保存设备文件的目录(内核自动生成)         *
    proc        保存进程和内核运行状态信息的目录(内核自动生成) *
    sys         保存设备模型相关的目录(内核自动生成)     *
    tmp         临时存储目录(内存)                       *

    home        保存普通用户家目录的目录
    root        超级管理员用户的家目录

    lost+found  ext4文件系统格式自动产生的目录, 保存ext4文件系统格式日志信息

    media       用于自动挂载U盘的目录
    mnt         用于自定义挂载的目录
    cdrom       用于自动挂载光驱的目录

    var         保存系统日志
    srv         保存服务的家目录
    run         保存服务正在运行的临时文件目录

    opt         作为第三方软件安装目录

linux的特点:
    一切皆于文件
    没有输出代表正确

-------------------------------------------------------------------------------
计算机命名规则:
    严格区别大小写
    数字 大小写字母 特殊字符组合
    尽量少用特殊字符(除下划线和减号外)
    数字和特殊字符不能开头(下划线除外)
    尽量使用英文前缀命名

    驼峰命名法:
        小写开头驼峰命名: zhuLong
        大写开头驼峰命名: ZhuLong

    unix命名法(全小写或全大写):
        zhu_long


命令格式和分类
    shell(人机交互)程序:
        文本    window:cmd  linux:csh bash zsh
        图形    windows X-Window

    linux默认命令解析器: bash

    命令的格式
        所有英文书写必须使用半角(宽字符: 光标移上去显示两个位置)
        命令和参数严格区分大小写

        命令使用语法: 命令名 参数1 参数2 ... 参数n
            命令名与参数之间分隔符为空格(自动处理重复分隔符)
            参数之间分隔符为空格(自动处理重复分隔符)

            []      可有可无
            ...     前面内容可以有多个(不限个数)
            |       多选一

        命令的参数
            处理参数里带空格字符问题: 使用双引号或单引号来解决

            命令参数的分类:
                选项    以-或--开头的参数, 控制命令的功能
                    长选项  --
                        可读性高, --后跟单词
                    短选项  -
                        便捷性高, -后跟单个字符, 如果跟多个字符代表多个短选项

                    选项值
                        无值选项  -l / --list
                        有值选项  -t utf8 / --to=utf8
                        可选值选项 --color=auto / --color

                普通参数(多为路径)  命令处理的源

    命令的分类
        内部命令    内置于shell程序的命令
        外部命令    独立于shell程序的可执行文件

        区分内部和外部命令:
            type 命令: 显示内建信息为内部命令

            which 命令: 有路径打印代表是外部命令

-------------------------------------------------------------------------------
基本操作命令
    帮助命令
        内部命令的帮助信息:
            help 内部命令
            man bash    获取Shell解析器的帮助信息(内部命令)

        外部命令的帮助信息: man [1-8] 外部命令
            [1-8]:  代表帮助信息章节
                1   普通命令的帮助信息
                2   系统调用的帮助信息(C/C++编程)
                3   标准库帮助信息(C/C++)
                5   系统配置文件帮助信息
                8   系统管理员命令的帮助

    目录操作命令
        创建            mkdir
            ..      上一级目录(创建目录自动生成)
            .       当前目录(创建目录自动生成)
            ~       代表家目录

            获取当前路径: pwd
            切换工作路径: cd
                切换指定路径: cd 路径
                切换当前登录用户的家目录:
                    cd
                    cd ~
                返回当前目录的上一级: cd ..
                返回上一次所在目录: cd -

            在当前目录下创建一个目录:
                mkdir kyo

            指定目录下创建目录:
                mkdir /tmp/test/kyo

            在指定多个路径下创建指定的目录:
                mkdir kyo /tmp/test/abc ./test/abc

            创建目录树(路径中不存在的目录自动会创建):
                mkdir /tmp/test/kyo/abc/xyz -p

            创建100个目录:
                mkdir {1..100}

        删除            rmdir/rm -r
            rmdir 目录路径  只能删除空目录
            rm -r 目录路径  删除整个目录(慎用)

        复制            cp -r
            cp -r 源路径... 目标路径
                源路径:
                    必须是存在的路径
                    以空格为分隔符可以支持源路径复制

                目标路径:
                    目标路径是目录: 把源目录复制此目录里去
                    目标路径最后一级是不存在路径: 把源目录重命名此路径目录

                复制一个文件: 目标没有限制
                复制一个目录: 目标路径必须存在的目录或不存在路径
                复制多个文件和目录: 目标必须是存在的目录

            选项:
                -r      复制目录
                -i      提示是否覆盖, 默认直接覆盖
                -u      更新, 比对时间,源文件比目标文件的时间新才会覆盖
                -v      显示复制进度
                -t      指定目标路径(应用复制多个文件或目录的场景)

        剪切/重命名     mv
            mv 源路径 目标路径

        查看目录信息    ls -ld
        遍历目录        ls/ls -l
        修改属性        chmod/chown/touch

    文件操作命令
        创建            touch/vim
        删除            rm
        编辑            vim
        复制            cp
        剪切/重命名     mv
        查看文件信息    ls -l/file
            file        查看文件类型信息(文件后缀只是为可读性)
        修改属性        chmod/chown/touch

    ls命令
        -l      列表文件详细信息
        -a      显示所有文件, 包含隐藏文件
            隐藏文件: 以点开头的文件为隐藏文件
        -d      显示目录详细信息
        -R      递归显示目录里详细信息(显示目录里所有文件信息)
        -h      将文件大小加单位(K M G T P)

        ls -l文件详细信息:
            -rwxr-xr-x 1 kyo kyo      3617 Oct 26 17:06 0_env.txt

            -rwxr-xr-x          文件类型和权限
                第一个字符代表文件类型
                    -       普通文件 (文本文件/二进制文件)
                    d       目录
                    l       软链接文件
                    c       字符设备文件
                    b       块设备文件
                    s       套接字文件
                    p       管道文件

                后九个字符代表文件权限
                    rwxr-xr-x

            1                   文件硬链接数
            kyo                 文件所属用户
            kyo                 文件所属用户组
            3617                文件大小, 默认单位为字节
            Oct 26 17:06        文件最后修改时间
            0_env.txt           文件名

    文件阅读命令
        cat     直接将文本文件内容输出到终端
            cat 1.txt       显示文件内容
            cat -n 1.txt    显示行号输出文件

        less    支持更多操作在终端查看文件内容

        head    查看文件头多少行
            head -n 1   查看头1行内容

        tail    查看文件尾多少行

-------------------------------------------------------------------------------
    重定向 > < >> << <<< 1> 2> &>
        标准输入    stdin       0
            默认情况下问终端要
        标准输出    stdout      1
        错误输出    stderr      2
            默认情况下输出到终端

        输出重定向  > >> 1> 2> &> 1>> 2>> &>>
            > / 1>   将命令标准输出重定向到目标(文件路径)
            >> / 1>> 将命令标准输出追加到目标
            2>       将命令错误输出重定向到目标
            2>>      将命令错误输出追加到目标
            &        将命令所有输出重定向到目标

            空洞文件: /dev/null
                将命令的所有输出重定向到空洞文件

        输入重定向 < << <<<
            <       将输入重定向到文件
            <<      将输入重定向结束标识符
            <<<     将输入重定向到字符串

    管道命令 |
        将|前面命令的标准输出作为|后面命令标准输入

        例:
            带行号的less: cat -n 1_linux.txt | less
            打印文件第8行: cat -n r | head -n 8 | tail -n 1

-------------------------------------------------------------------------------
vim的简单使用
    IDE  集成开发环境
        文本编辑器
        项目管理器
        编译器/解析器
        调试器

    vim 文本编辑器(文本编辑器之神 排第二)
        为文本编辑提供高效的操作
        高度自定义(定制简单) 扩展编程语言支持python
        开源

        三种模式:
            普通模式    默认为普通模式, 接受用户指令对应去执行操作(定位 操作)
                可视模式    用于选取
                    v           按列选取
                    V           按行选取
                    ctrl + v    按块选取
            编辑模式    进入编辑文档
                插入模式    i I o O s S a A
                替换模式    R r
            命令行模式  接受命令对整个文档操作
                普通切换到命令模式: 输入冒号

            所有模式切换回普通模式: ESC

        使用vim简单流程:
            1. 打开文件: vim hello.txt
            2. 切换到编辑模式(默认为普通模式): 按i
            3. 进行编辑
            4. 切换到命令行模式: 先按ESC再按冒号
            5. 保存退出: 在命令行模式输入wq
                :w   保存
                :q   退出
                :w!  保存
                :q!  强制退出
                :wq! 强制保存退出
                :wq  保存退出
                :x   保存退出(不建议使用)

        vim本地熟悉教程: vimtutor

        vim问题: 打开vim提示E325: ATTENTION信息
            原因:
                vim编辑文档时会自动产生临时文件, 用于非正常退出恢复使用

                在其它地方vim使用此文件
                文件编辑过非正常退出vim
            解决:
                恢复非正常退出保存的数据
                删除临时文件(在vim打开提示信息中有显示)

