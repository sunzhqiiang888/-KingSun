Git
    分布式版本控制系统
    Git的前身: BitKeeper
    Git的优势:
        速度
        分支轻量级
        开源
        跨平台
        完全分布式(跨域协作)
        GitHub
        快照记录
        完全本地执行

    Git官方网: https://git-scm.com/

    ubuntu安装: sudo apt install git

Git将仓库分为三个状态:
    (工作区)工作目录        实际操作的文件目录
    (暂存区)暂存区域        将工作目录下修改可以选择性提交
    (仓库区)Git仓库         跟踪文件修改, 提供各种Git仓库的操作(还原)

Git的配置
    配置文件:
        /etc/gitconfig      全局配置, 影响所有用户所有仓库(一般不用)
        ~/.gitconfig        用户配置, 影响当前用户的所有仓库
        .git/config         项目配置, 影响当前仓库

        配置项查找优先级: .git/config -> ~/.gitconfig -> /etc/gitconfig

    首次配置Git使用用户信息:
        将以下内容追加到~/.gitconfig文件中
        [user]
            email = iprintf@qq.com
            name = kyo
        [alias]
            la = log --oneline --decorate --all --graph
            st = status

    修改和查看配置信息的命令: git config

Git基本使用
    初始化仓库
        进入需要初始化仓库的目录输入: git init

    克隆仓库
        git clone 要克隆仓库的URL [克隆到哪]

        file协议本地克隆:
            git clone file:///kyo/ /dev/shm/test

        http协议克隆:
            git clone http://git.oschina.net/iprintf/ubuntu-config

        ssh协议克隆(ssh需要密钥):
            git clone git@git.oschina.net:iprintf/ubuntu-config

    查看状态
        git status

    添加文件(将文件放到暂存区)
        git add 文件...

    提交到仓库
        git commit
            弹出vim编辑此次提交的说明
                第一行代表说明的标题
                第二行必须是空行
                第三行开始以下代表说明的详细信息

                详细信息可省略, 标题建议必须写
                #开头为注释，不会被提交

        git commit -m "提交说明的标题"
        git commit -m $'提交说明的标题\n\n提交说明详细信息'
        git commit -a
            将所有修改提交(省略add操作)
        git commit -v
            弹出vim编辑此次提交的说明(带修改信息)
        git commit --amend
            弹出vim对最后一次提交说明进行编辑

    查看此次变动
        git diff [文件]

    查看暂存区变动
        git diff --cached [文件]

    查看提交历史
        git log

    查看提交修改
        git show COMMIT
            commit a067489d95e3675895c5ca73adb41ab8a71af81c
                全写: a067489d95e3675895c5ca73adb41ab8a71af81c
                简写(前4位以上): a067

    撤消工作区的修改
        git checkout file

    撤消暂存区的修改
        git reset HEAD file

    查看本地操作历史
        git reflog

    时光穿梭机
        git reset commit
        git reset commit --hard

分支
    分支概念
        HEAD        指向当前所在分支
        master      主分支, 第一个提交后自动创建
        origin/master   远程分支

    创建分支
        git branch 分支名

    查看分支
        git branch

    切换分支
        git checkout 分支名

    删除分支
        git branch -d 分支名

    合并分支
        git merge 合并分支名

-------------------------------------------------------------------------------
远程仓库的操作
    添加远程仓库
        git remote add 远程仓库名 远程仓库地址

    拉取远程仓库内容
        git fetch 远程仓库名 远程仓库的分支名

    合并远程分支
        git merge 远程仓库名/远程分支

    提交当前修改到远程仓库
        git push 远程仓库名 推送分支


    GitHub:
        Git代码仓库服务器
        所有开源代码都放在GitHub上维护
        GitHub为团队协作的第三方服务器

    实现无密码上传下载: ssh协议中ssh密钥
        生成ssh密钥: ssh-keygen
            第一步访问密钥存储位置(默认存储到~/.ssh/, 推荐修改存储位置)
            第二步访问私钥保护密码(空密码)

        复制公钥到服务器:
            默认公钥路径: ~/.ssh/id_rsa.pub
            复制公钥内容: cat ~/.ssh/id_rsa.pub | xclip -i -sel clip
            打开码云或GitHub找开ssh公钥将公钥复制进去

        设置ssh连接配置: ~/.ssh/config
            追加以下内容:
                Host osc
                    Hostname gitee.com
                    User git
                    PubKeyAuthentication yes
                    IdentityFile ~/.ssh/id_rsa

        添加远程仓库:
            git remote add ee osc:iprintf/python-1025
                #osc == git@gitee.com

-------------------------------------------------------------------------------
作业
    1. 加入码云的python-1025项目, 并且克隆到本地
        首次克隆, 再次同步只需要进入项目目录输入: git pull

    2. 码云上新建项目, 将python-1025项目内容经过上传新建项目中

    3. 码云上新建私有项目, 将同组人员拉到此项目，三个人同时对项目进行push/fetch

