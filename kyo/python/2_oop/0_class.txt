类和对象(OOP)
    类对象      class后面的名字为类对象
    实例对象    执行类对象产生实例对象

    默认情况实例对象是没有属性
    实例对象没有的属性会向类对象获取, 类对象也没有就会报错
    Python的对象的支持动态添加成员(属性/方法)

    Python的类对象默认继承object类(所有类的基类)

类的方法:
    常规方法
        在类下面定义的函数,并且函数第一个参数实例对象
        常规方法的特点是调用时会自动将实例对象作为第一个参数传入
        常规方法的调用方式:
            实例对象.常规方法名(参数...)
            类对象.常规方法名(实例对象, 参数...)

        特殊方法也属性常规方法:
            以__开头并且以__结尾的方法为特殊方法
            特殊方法是Python内置提供用于重s写

    静态方法
        在类下面定义的函数上面使用@staticmethod装饰器代表此函数为静态方法

        不会将实例对象为作第一个参数传入到方法, 静态方法当中不能访问实例对象的属性
        静态方法不用实例化对象, 直接可被类对象来调用


    类方法
        在类下面定义的函数上面使用@classmethod装饰器代表此函数为类方法

        类方法与静态方法类似, 会将类对象作为第一个参数传入类方法中

-------------------------------------------------------------------------------
异常处理
    Python程序遇到的错误会有异常抛出 - (逻辑错误, 语法错误)
    不处理异常最终程序会终止运行

    异常的触发方式
        程序运行出错时产生异常
        手动产生异常(raise, assert)

    异常处理(异常捕捉)
        try:
            有可能产生异常的代码块
        except:
            ...

    自定义异常
        class 自定义异常名(Exception):
            pass

安装32位的C兼容库:
    sudo apt install libc6-i386 -y

    运行学生成绩管理系统案例: ./stu

