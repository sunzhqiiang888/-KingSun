列表
    列表的特点
        任意对象的有序集合
        通过偏移读取
        可变长度、异构以及任意嵌套
        属于可变序列的分类
        对象引用数组

    列表的定义
        l = [1, 2, 3]
        l = list()
        l = list(range(10))

    列表的操作符
        l = [1, 2, 3] + [4, 5, 6]   输出[1, 2, 3, 4, 5, 6]
        l = ["Hi"] * 4              输出["Hi", "Hi", "Hi", "Hi"]

    列表与字符串的转换
        字符串转列表
            l = list("hello")

        列表转字符串
            l = [1, 2, 3]
            s = "".join(l)
            s = str(l)          输出"[1, 2, 3]"

    高级序列赋值
        a, b, c = [1, 2, 3]
        a, b, c = s[0], s[1:3], s[:3]

    扩展序列解包
        l = [1, 2, 3, 4]
        a, b, *c = l
            a = 1
            b = 2
            c = [3, 4]

        *a, b = l
            a = [1, 2, 3]
            b = 4

        a, *b, c = l
            a = 1
            b = [2, 3]
            c = 4

    列表的嵌套(可模拟多维数组)
        l = [1, [2, 3, 4], 6]

        矩阵
            l = [
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]
                ]

            快速创建矩阵: l = [[0] * 5] * 5

    列表迭代遍历
        for x in [1, 2, 3, 4]:
            print(x)

        for (a, b, c) in [[1, 2, 3], [4, 5, 6]]:
            print(a, b, c)

        遍历列表的索引和值
            for k,v in enumerate([1, 2, 3, 4]):
                print("%d => %d" % (k, v))

            遍历列表的索引和值并且指定起始索引值从2开始对应
                for k,v in enumerate([1, 2, 3, 4], 2):
                    print("%d => %d" % (k, v))

    列表复制
        列表对象赋值为引用赋值，即赋完值改变会相互影响
        l = [1, 2, 3, 4]
        a = l               浅拷贝
        a = l.copy()        深拷贝

    列表推导式(列表解析表达式)
        l = [1, 2, 3, 4, 5]

        返回列表每个元素都乘4的新列表
            [c * 4 for c in l]

        返回列表中偶数乘4的新列表
            [c * 4 for c in l if c % 2 == 0]

        返回字符串每个字符的ASCII的新列表
            [ord(c) for  c in "hello"]

        返回字符串每个字符对应ASCII字典对应表
            [c: ord(c) for  c in "hello"]

        返回两个字符串按字符组合的新列表
            [c1 + c2 for c1 in "hello" for c2 in "world"]

        返回列表中字符串元素转换小写的新列表
            l = ['Hello', 'World', 18, 'Apple', None]
            [x for x in l if isinstance(x, str)]

    列表的基本操作
        列表的索引
            列表的索引从0开始计算，不能越界，否则会报错
            l[0]        访问列表第1个元素
            l[3]        访问列表第4个元素
            l[-1]       访问列表倒数第一个元素

        列表的分片
            l[:3]       截取列表从头到第4个元素
            l[1:5]      截取列表第二个开始到第5个元素
            ...

        列表的长度
            len([1, 2, 3])

        列表的增加
            l.append(1)             追加一个元素
            l.extend([3, 4, 5])     追加多个元素
            l.insert(0, 'head')     指定位置插入元素
            l[5:8] = [1, 2, 3]      将列表第6个位置到第8个元素增加1, 2, 3

        列表的删除
            del l[0]            删除一个元素
            del l[1:3]          删除多个元素
            l.pop(3)            删除指定位置元素并且返回删除元素的值
            l.pop()             不指定参数默认删除并且返回最后一个元素
            l.remove('a')       删除指定元素
            l[1:3] = []         删除第一个和第二个元素

        列表的更改
            l[0] = "hello"      更改单个值
            l[1:3] = ['a', 'b'] 更改多个值

        列表的查询
            l.count('a')        计算值出现的次数
            l.index('a')        查找值出现的位置
            'a' in l            判断值是否存在于列表中

        列表的反转
            reversed(l)         使用内置函数
            l.reverse()         使用列表的方法
            l[::-1]             使用列表分片

        列表的排序
            l.sort()
            sorted(l)

        列表内置函数操作
            max(l)      求列表最大值
            min(l)      求列表最小值
            sum(l)      求列表所有值和

-------------------------------------------------------------------------------
元组
    元组的特点
        任意对象的有序集合
        通过偏移存取
        属于不可变序列类型(相当于不可改变的列表)
        元组不可改变，元组元素可能可以改变(取决于元素类型)
        固定长度、异构和任意嵌套
        对象引用的数组

    元组的定义
        t = ()
        t = (0, 'Ni', 1.23, [1, 2, 3])
        t = 0, 1, 2, 3
        t = tuple()
        t = tuple("spam")

    元组特殊语法
        t = (40)        表示整型, 因为小括号可以隐藏连接物理行
        t = (40, )      表示一个元素的元组


    元组除了使用tuple和()来表示和不能修改外，其它的操作与列表一样
    元组使用+和*以及分片操作时将返回新元组
    元组不提高字符串、列表或字典中的方法，如果想排序必须转成列表
    列表推导式也可应用于元组

    元组的存在理由:
        元组的不可变性提供了完整性, 可以确保元组在程序中不会被另一个引用修改

-------------------------------------------------------------------------------
字典
    字典的特点
        通过键而不是偏移量读取
        任意对象无序集合(不适用串接，切片)
        可变长、异构和任意嵌套
        属于可变映射类型
        对象引用表(散列表)
        给新key赋值会添加新的元素(即没有边界检查)
        key不一定是字符串(整数, tuple)

    字典的定义
        d = {}

        d = {'name': 'tom', 'age': 14}

        d = dict()

        d = dict(zip(['a', 'b', 'c'], [11, 22, 33]))

        d = dict(name='tom', age=14)

        d = dict.fromkeys(['a', 'b'])
            以a和b为键名，值为None创建字典

        d = dict.fromkeys(['a', 'b'], 123)
            以a和b为键名，值为123创建字典

        d = dict([('name', 'tom'), ('age', 45)])

    字典的嵌套
        d = {'stu': {'name': 'tom', 'age': 34}}

    字典元素长度
        len(d)

    字典键值索引
        d['name']               获取键名为name的对应值
        d['stu']['name']        获取键名为stu子字典键名为name的值
        d[(2, 3, 4)]            获取键名为tuple(2, 3, 4)的对应值

    字典复制
        d1 = d.copy()           与列表一样, 直接等号赋值为引用赋值

    字典元素添加和更改
        d[key] = value          添加或修改一个元素(key存在修改，不存在则添加)
        d.update(d2)            合并d2字典到d字典中，key 相同则覆盖

    字典元素删除
        del d[key]              删除一个元素
        d.pop(key)              删除并返回被删除的值
        d.popitem()             删除并返回任意的一对key/value

    字典元素查询
        key in D                判断key值是否存在于字典
        d[key]                  返回key对应的值
        d.get(key, default)     返回key对应的值，key不存在则返回所提供的默认值
        d.pop(key, default)     删除并返回key对应的值，key不存在则返回所提供的默认值

    字典视图
        d.keys()                获取字典所有的key, 返回可迭代对象，但不是列表
        d.values()              获取字典所有的value, 返回不是列表
        d.items()               获取字典所有的key/value对, 返回不是列表

    字典遍历
        遍历字典所有键名
            for k in d:
                print(k)

                或

            for k in d.keys():
                print(k)

        遍历字典所有键名
            for x in d.values():
                print(x)

        遍历字典所有键名和键值
            for k, v in d.items():
                print(k, v)

            for k, v in enumerate(d):
                print(k, v)

    字典推导式(字典解析)
        {x: x ** 2 for x in [1, 2, 3, 4]}
            输出: {1:1, 2:4, 3:9, 4:16}

        {c: c * 4 for c in 'SPAM'}
            输出: {'A':'AAAA', 'P':'PPPP', 'S':'SSSS', 'M':'MMMM'}

        {k: 0 for k in ['a', 'b', 'c']}
            输出: {'a':0, 'b':0, 'c':0}     相当于dict.fromkeys('abc', 0)

        d = {'name': 'tom', 'age': 45}
        {'%s => %s' % (k, v) for k, v in d.items()}
            输出集合: {'name => tom', 'age => 45'}

        {k:'%s => %s' % (k, v) for k, v in d.items()}
            输出: {'name':'name => tom', 'age':'age => 45'}

    字典键名排序
        d = {'t': 88, 'a': 100, 'c': 13}
        ks = list(d.keys())     必须转成列表进行排序

        ks.sort()
        for k in ks:            通过列表索引字典元素值
            print(k, d[k])

        通过内置函数来排序:
            for k in sorted(d):
                print(k, d[k])

-------------------------------------------------------------------------------
集合
    集合的特点
        对象无序集合
        元素保证唯一
        可变长度
        即不是序列也不是映射类型(没有value的字典)
        集合本质上具有基本的数学特性(广泛应用于数字与数据库工作中)
        集合常应用于去除列表的重复元素

    集合的定义
        s = set()
        s = set('abcdef')
        s = set([1, 2, 3, 4])
        s = {1, 2, 3}

    集合的长度
        len(s)

    集合操作符
        差集     s1 - s2        返回s1里有的s2里没有的元素集合
        并集     s1 | s2        返回s1和s2合并去重的元素集合
        交集     s1 & s2        返回s1和s2共同都有的元素集合
        异集     s1 ^ s2        返回s1和s2不重复的元素的集合
        超集     s1 > s2        判断s2所有元素在s1里是否都有
        子集     s1 < s2        判断s1所有元素在s2里是否都有

    集合操作方法
        s.union(s1)                 并集
        s.issuperset(s1)            超集
        s.issubset(s1)              子集
        s.intersection(s1)          交集
        s.difference(s1)            差集
        s.symmetic_difference(s1)   异集

    集合复制
        s.copy()

    集合的增加
        s.add(3)
        s.add('hello')
        s.update([1, 2, 3])     添加多个值

    集合的删除
        s.remove     从集合中删除一个元素
        s.pop        删除并返回任意一个元素
        s.clear      清空集合

    集合的查询
        134 in s
        'hello' in s

    集合解析(字典解析不使用key即是返回集合)
        {x for x in [1, 2, 3, 4]}

    列表去重
        list(set([1, 2, 3, 2, 3]))

-------------------------------------------------------------------------------
VT100终端码
    只要*nix都支持, windows不支持(git-shell)
    和Python没有关系, 属于终端提供的
    只要往终端输入\033[字符串就会被终端解析

    VT100终端码的前缀: \033[

    颜色输出    m
        前景: 30 - 37
        背景: 40 - 47
        样式:
            1   加粗
            0   取消样式

        颜色输出格式: \033[样式;前景;背景m
            样式 前景 背景可以任意组合也可以单一出现, 不限顺序
            但如果遇到错误会影响后面显示效果

    绝对定位    H
        定位可以操作光标位置, 但不能超过终端大小($LINES $COLUMNS), 超过无效
        最左上角位置为1;1H
        绝对定位格式: \033[行;列H

    相对定位    A|B|C|D
        相对于当前光标位置进行偏移
        A   上
        B   下
        D   左
        C   右

        格式: \033[数字A

    光标操作
        隐藏    \033[?25l
        显示    \033[?25h
        保存    \033[s
        还原    \033[u

    清除操作
        清屏        \033[2J
        清整行      \033[2K
        清光标后面的内容    \033[K

-------------------------------------------------------------------------------
2017-11-08 - 作业:
    完善弹球程序
        实现反弹效果
        实现空格控制弹球的颜色
        实现上下左右控制弹球方向
        封装函数使代码逻辑更简洁, 包括封装VT码

作业
    从一个数组中找出第二大数(重复不比较)
    M个人围成一圈循环报数，报到N的人退出，输出退出顺序
    3 5 7 8能组合多少不能被5整除的4位数，位数不能相同
