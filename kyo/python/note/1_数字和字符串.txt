整数、浮点数和复数
    int         整型(正负数)
        + - * / // **
        Python3中整型是没有大小限制

    布尔值      bool
        布尔值(True/False)

    浮点型      float
        1.25 2.5e2(2.5*10**2)
        浮点型由整数与小数部分组成, 浮点型也可以使用科学计数法表示
        Linux操作系统是用二进制表示浮点数，而二进制表示只能表示近似值
            round(3.55, 1)  四舍五入保留一位小数点  结果为3.5

            from decimal import Decimal
            Decimal('3.333333333333333333333333333')
            float(round(Decimal('3.55'), 1))

    复数        complex
        复数由实数部分和虚数部分组成, a + bj或complex(a, b)表示
        复数的实数和虚数都是浮点型
        复数不使用Python编程

-------------------------------------------------------------------------------
整型的进制表示方法
    二进制:   0b10101
    八进制:   0o123
    十六进制: 0x135
    十进制:   135

    bin     将任意进制数转为二进制表示法(返回字符串)
    oct     将任意进制数转为八进制表示法(返回字符串)
    hex     将任意进制数转为十六进制表示法(返回字符串)
    int     将任意进制数转为十进制表示法(返回整型)

-------------------------------------------------------------------------------
位操作运算符
    位操作符只能操作整型存储数据(int)
    位操作符操作整型数的二进制位

    补码: 对数的二进制按位取位加1
        对负数位操作时必须换算补码

    &   二进制位两个都为1，结果为1
    |   二进制位两个有一个1, 结果为1, 两个都为0才为0
    ^   二进制位两个不一样才为1,否则为0
    >>  去除二进制位最右边的位，正数上面补0, 负数上面补1
    <<  去除二进制位最左边的位，右边补0
    ~   二进制位，原为1的变成0, 原为0变成1

-------------------------------------------------------------------------------
内置数学函数
    掌握函数int, float, pow, abs, round, hex, bin, sum, max, min 的用法

    随机数: random
        返回0到1之间的随机数(浮点数)
            random.random()

        从一个序列中随机选择
            random.choice(序列)

        从一个范围中随机选择
            random.randint(起始值, 结束值)

        将一个序列打乱
            random.shuffle(序列)

    数学运算模块: math
        math.pi     圆周率

-------------------------------------------------------------------------------
字符串常量表示语法(单双引号、特殊字符和三重引号)
    字符串的特点
        1. 字符串中的字符是按从左到右的顺序排列的
        2. 字符串是不能够被改变的
        3. 单字符的字符串与多字符的字符串在本质上是一样的
        4. 单双引号没有区别，三重引号可以跨多行
        5. 三重引号不是赋值语句为多行注释

    定义字符串对象
        name = 'John Smith'
        name = "Alice"
        name = """Bob"""

    单行注释: #
    多行注释: '''/"""

    前缀字符r/R: 表示非转义原始字符串
        普通字符串当中出现\有可能会将下一个字符转义成特殊字符

        特殊转义字符:
            \n      换行
            \t      制表符
            \b      退格
            \"      脱义"的特殊意义
            \'      脱义'的特殊意义
            \\      脱义\的特殊意义

        如果不想在字符串中解析\功能，比如说正则表达式，可使用r前缀修饰字符串
            r"hello\nworld"      这样输出字符串不会解析\，则不会换行

    前缀字符b/B: 使用单字节表示字符串 (bytes)
        字符串由多个字符组成，而计算机不能直接识别字符，只能识别数字
        所以在计算机内存上必须使用数字表示字符，称之为字符编码
        键盘的字符通常使用ASCII编码来表示，一个字节对应一个字符

        Python3提供了单字节表示的类型, 为bytes
        与普通字符串的区别是bytes类型访问的是ASCII编码, 并非是字符

        例: s = b'ABC'
            s[0]        输出65, 不是A字符

        bytes与str类型互转
            str转bytes:
                "hello".encode()

            bytes转str:
                b"hello".decode()

-------------------------------------------------------------------------------
字符串的操作(索引、分片、转换和修改)
    字符串连接符:
        name = 'John' + ' ' + 'Smith'

    重复字符赋值:
        dashes = '-' * 80

    字符串序列赋值
        a, b, c = "ABC"
            字符串字符个数必须与变量个数匹配
        a, b, c = s[0], s[1:3], s[:3]

        ((a, b), c) = ('sp', 'AM')
            a = 's'
            b = 'p'
            c = 'AM'

        red, green, blue = range(3)

    扩展序列解包
        a, b, *c = "hello"
            a = 'h'
            b = 'e'
            c = ['l', 'l', 'o']

        *a, b = "hello"
            a = ['h', 'e', 'l', 'l']
            b = 'o'

        a, *b, c = "hello"
            a = 'h'
            b = ['e', 'l', 'l']
            c = 'o'

    字符串索引 (返回字符串中的第几个字符)
        text[0]     返回字符串第一个字符
        text[10]    返回字符串第11个字符
        text[-1]    返回字符串倒数第一个字符

    字符串分片 (字符串截取)
        text[1:10]      截取从1到10下标位置的字符串
        text[3:]        截取从3下标开始到结束的字符串
        text[:3]        截取从开头到3下标位置结束的字符串
        text[-2:]       截取从倒数2个位置到结束的字符串
        text[:-3]       截取开头到倒数第3个位置结束的字符串
        text[-10:-3]    截取倒数10个位置到倒数3个位置结束的字符串
        text[::2]       指定截取字符串的步长, 默认为1, 即跳着取
                        如hello, 输出hlo
        text[::-1]      指定截取字符串的步长-1, 即从后向前取
                        如hello, 输出olleh

    返回字符串长度
        len(字符串变量)

    转换大小写
        text.upper()
        text.lower()

    分割字符串
        text.split()
        text.split("-")

    指定分隔符连接元素
        ':'.join("hello")       输出: 'h:e:l:l:o'
        ''.join([1, 2, 3, 4])   输出: '1234'

    查找字符串
        判断子串是否存在于name字符串
            'John' in name

        查找子串返回所在位置
            name.find('John')

    去除头尾字符
        去除头尾空白字符
            str.strip()

        去除尾空白字符
            str.rstrip()

        去除头尾指定字符(h或d都去除)
            str.strip('hd')

    ASCII互转
        ord('A')    输出: 65
        chr(65)     输出: 'A'

    其它类型转成字符串
        str(123)
        repr(34.56)

    字符串替换(返回替换后的新字符串)
        str = "hello"
        str.replace('l', "L")       把hello里所有l替换成L
        str.replace('l', "L", 1)    把hello里第一个l替换成L

    字符串的修改
        字符串是不允许直接修改，字符串修改操作函数都是返回新的字符串
        修改方法一: 通过分片与连接组成创建新的字符串
            s = 'heo'
            s = s[:2] + 'll' + s[-1]

        修改方法二: 可以转成列表修改再换回字符串(切换类型，效率低)
            s = "hello"
            l = list(s)
            l[0] = 'H'
            s = ''.join(l)

        修改方法三: bytearray
            如果出现高频修改字符串的操作时，建议使用bytearray来提高效率

            创建空字节数组对象
                s = bytearray()

            创建一个整型的字节数组对象
                s = bytearray(65)

            创建bytes类型转换的字节数组对象
                s = bytearray(b'hello')

            创建字符串转换的字节数组对象(必须指定字符编码，建议使用UTF-8)
                s = bytearray('hello', "UTF-8")

            替换指定范围的字节数组(bytearray是可以直接修改元素的)
                s[1:10] = b"helloworld"

            追加字符字节到字节数组最后
                s.append(65)

            插入到字节数组某个位置
                s.insert(3, ord('a'))

            替换字节数组内容
                s.repalce(b'H', b'HELLO')

            转换成字符串类型
                s.decode()

-------------------------------------------------------------------------------
字符串格式化表达式
    传统的字符串格式化表达式：
        形式一，按位置对应一个值或者tuple 里面的多个值：
            'Good %s %s' % ('morning', 'Joshua')

        形式二，按名字对应字典中的值：
            'Good %(time)s %(name)s' % {'time': 'morning', 'name': 'Joshua'}

        格式字符串的形式是 %s，在格式字符串中，可以放置各种格式控制字符:
            s   字符串
            d   整型
            c   字符
            o   八进制
            x   十六进制
            X   大写字母十六进制
            f   浮点数
            %   输出%

            o x X控制字符前可以加#可输出进制标识符
            所有控制符前可加正数控制输出占位数并且右对齐
            所有控制符前可加负数控制输出占位数并且左对齐
            所有控制符前可加0正数控制输出占位数并且右对齐, 前面补零
            f控制字符前可加.数字控制浮点数保留小数点位数

    新型的字符串格式化方法：
        形式一，按位置取值：
            'Good {0} {1}'.format('morning', 'Joshua')

        形式二，按键值取值：
            'Good {time} {name}'.format(time='morning', name='Joshua')

        指定元素对象属性
            '{0.platfrom}.format(sys=sys)'

        指定元素对象属性
            '{config[spam]}.format(config={'spam':'laptop'})'

        指定以10个字符位左对齐输出hello
            '{0:10}'.format('hello')    #字符串默认右对齐，数字默认左对齐
                或
            '{0:<10}'.format('hello')

        指定以10个字符位右对齐输出hello
            '{0:>10}'.format('hello')

        指定以10个字符位居中对齐输出hello
            '{0:^10}'.format('hello')

        指定以10个字符位左对齐前面补零输出1234
            '{0:010}'.format(1234)

        保留小数点位数
            '{0:.2f}'.format(34.567833)

        科学计算表示法表示浮点数
            '{0:e}'.format(34.567833)

        科学计算表示法表示浮点数并且保留两位小数点
            '{0:.2e}'.format(34.567833)

        进制表示输出
            '{0:X}'.format(100)     大写十六进制输出
            '{0:x}'.format(100)     小写十六进制输出
            '{0:o}'.format(100)     八进制输出
            '{0:b}'.format(100)     二进制输出 (方法独有)
            '{0:#x} / {0:#o} / {0:#b}'  进制带前缀符号输出

        数字分隔输出
            '{0:,d}'.format(99999999)   输出99,999,999

-------------------------------------------------------------------------------
字符串练习:
    字符串数字相加/计算五十位数字相加
        a = "123"
        b = "789"

    统计字符串单词个数(单词分隔符[^a-zA-Z]) (str_word_count)
        考虑重复分隔符问题

    用户输入两字符串，连接两字符串，并且去除两字符串重复单词输出
        单词分隔符为(空格)   处理连续分隔符问题
        例：
            输入：
                what is your name
                is my name is kyo is

            输出：what your my kyo

    用户输入一字符串，对此字符串以单词进行反转输出
        例：
            输入：how are you
            输出：you are how

    输出两个字符串的最大公共子串
        例：
            输入：
                howareyou
                hwwarett

            输出：ware

    输入一字符串，对其字符串提取数字存入一数组，输出此数组之和
        例：
            输入：sdfj123dsjf567sjdf12
            输出：123 + 567 + 12 的和

